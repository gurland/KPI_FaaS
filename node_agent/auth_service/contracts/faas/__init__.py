# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api_gateway_trigger_service.proto, auth_service.proto, common.proto, crontab_trigger_service.proto, function_service.proto, load_balancer_service.proto, runtime_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class UserRole(betterproto.Enum):
    USER = 0
    ADMIN = 1


@dataclass(eq=False, repr=False)
class Empty(betterproto.Message):
    """Used to specify empty request/response rpc types"""

    pass


@dataclass(eq=False, repr=False)
class Logs(betterproto.Message):
    """Used to pass logs from services/functions in a singular response"""

    log_lines: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FunctionConfiguration(betterproto.Message):
    function_name: str = betterproto.string_field(1)
    runtime_tag: str = betterproto.string_field(2)
    code: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DetailedFunction(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)
    runtime_tag: str = betterproto.string_field(2)
    function_name: str = betterproto.string_field(3)
    code: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class BriefFunction(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)
    runtime_tag: str = betterproto.string_field(2)
    function_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetFunctionDetailsRequest(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChangeFunctionCodeRequest(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)
    code: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ChangeFunctionRuntimeRequest(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)
    runtime_tag: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RuntimeConfiguration(betterproto.Message):
    tag: str = betterproto.string_field(1)
    dockerfile: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BriefRuntime(betterproto.Message):
    tag: str = betterproto.string_field(1)
    registry_url: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetRuntimeDetailsRequest(betterproto.Message):
    tag: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DetailedRuntime(betterproto.Message):
    tag: str = betterproto.string_field(1)
    registry_url: str = betterproto.string_field(2)
    dockerfile: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class UpdatedRuntimeResponse(betterproto.Message):
    runtime: "DetailedRuntime" = betterproto.message_field(1)
    logs: "Logs" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InvokeFunctionRequest(betterproto.Message):
    function: "DetailedFunction" = betterproto.message_field(1)
    runtime: "BriefRuntime" = betterproto.message_field(2)
    json_trigger_context: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class InvocationResult(betterproto.Message):
    json: str = betterproto.string_field(1)
    log_lines: "Logs" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RegisterNodeRequest(betterproto.Message):
    ip: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NodeConfiguration(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ApiGatewayTriggerConfiguration(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DetailedApiGatewayTrigger(betterproto.Message):
    trigger_id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DeleteApiGatewayTriggerRequest(betterproto.Message):
    trigger_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetApiGatewayTriggersRequest(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CrontabTriggerConfiguration(betterproto.Message):
    cron_expression: str = betterproto.string_field(1)
    function_id: int = betterproto.uint32_field(2)
    description: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CrontabTrigger(betterproto.Message):
    trigger_id: int = betterproto.uint32_field(1)
    function_id: int = betterproto.uint32_field(2)
    cron_expression: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class DeleteCrontabTriggerRequest(betterproto.Message):
    trigger_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetCrontabTriggersRequest(betterproto.Message):
    function_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class User(betterproto.Message):
    user_id: int = betterproto.uint32_field(1)
    username: str = betterproto.string_field(2)
    role: "UserRole" = betterproto.enum_field(3)
    updated_at_timestamp: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class UserCredentialsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class VerifyUserRequest(betterproto.Message):
    user_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChangeUserPasswordRequest(betterproto.Message):
    user_id: int = betterproto.uint32_field(1)
    old_password: str = betterproto.string_field(2)
    new_password: str = betterproto.string_field(3)


class FunctionServiceStub(betterproto.ServiceStub):
    async def create_function(
        self,
        function_configuration: "FunctionConfiguration",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetailedFunction":
        return await self._unary_unary(
            "/faas.FunctionService/CreateFunction",
            function_configuration,
            DetailedFunction,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_function_code(
        self,
        change_function_code_request: "ChangeFunctionCodeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetailedFunction":
        return await self._unary_unary(
            "/faas.FunctionService/ChangeFunctionCode",
            change_function_code_request,
            DetailedFunction,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_function_runtime(
        self,
        change_function_runtime_request: "ChangeFunctionRuntimeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetailedFunction":
        return await self._unary_unary(
            "/faas.FunctionService/ChangeFunctionRuntime",
            change_function_runtime_request,
            DetailedFunction,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_function(
        self,
        brief_function: "BriefFunction",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Empty":
        return await self._unary_unary(
            "/faas.FunctionService/DeleteFunction",
            brief_function,
            Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_function(
        self,
        get_function_details_request: "GetFunctionDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetailedFunction":
        return await self._unary_unary(
            "/faas.FunctionService/GetFunction",
            get_function_details_request,
            DetailedFunction,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_functions(
        self,
        empty: "Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["BriefFunction"]:
        async for response in self._unary_stream(
            "/faas.FunctionService/GetFunctions",
            empty,
            BriefFunction,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class RuntimeServiceStub(betterproto.ServiceStub):
    async def create_runtime(
        self,
        runtime_configuration: "RuntimeConfiguration",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdatedRuntimeResponse":
        return await self._unary_unary(
            "/faas.RuntimeService/CreateRuntime",
            runtime_configuration,
            UpdatedRuntimeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def edit_runtime(
        self,
        runtime_configuration: "RuntimeConfiguration",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdatedRuntimeResponse":
        return await self._unary_unary(
            "/faas.RuntimeService/EditRuntime",
            runtime_configuration,
            UpdatedRuntimeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_runtime_details(
        self,
        get_runtime_details_request: "GetRuntimeDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetailedRuntime":
        return await self._unary_unary(
            "/faas.RuntimeService/GetRuntimeDetails",
            get_runtime_details_request,
            DetailedRuntime,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_runtime_tags(
        self,
        empty: "Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["BriefRuntime"]:
        async for response in self._unary_stream(
            "/faas.RuntimeService/GetRuntimeTags",
            empty,
            BriefRuntime,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class LoadBalancerServiceStub(betterproto.ServiceStub):
    async def invoke_function(
        self,
        invoke_function_request: "InvokeFunctionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "InvocationResult":
        return await self._unary_unary(
            "/faas.LoadBalancerService/InvokeFunction",
            invoke_function_request,
            InvocationResult,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_node(
        self,
        register_node_request: "RegisterNodeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NodeConfiguration":
        return await self._unary_unary(
            "/faas.LoadBalancerService/RegisterNode",
            register_node_request,
            NodeConfiguration,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ApiGatewayServiceStub(betterproto.ServiceStub):
    async def create_api_gateway_trigger(
        self,
        api_gateway_trigger_configuration: "ApiGatewayTriggerConfiguration",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetailedApiGatewayTrigger":
        return await self._unary_unary(
            "/faas.APIGatewayService/CreateAPIGatewayTrigger",
            api_gateway_trigger_configuration,
            DetailedApiGatewayTrigger,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_api_gateway_trigger(
        self,
        delete_api_gateway_trigger_request: "DeleteApiGatewayTriggerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Empty":
        return await self._unary_unary(
            "/faas.APIGatewayService/DeleteAPIGatewayTrigger",
            delete_api_gateway_trigger_request,
            Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all_api_gateway_triggers(
        self,
        empty: "Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["DetailedApiGatewayTrigger"]:
        async for response in self._unary_stream(
            "/faas.APIGatewayService/GetAllAPIGatewayTriggers",
            empty,
            DetailedApiGatewayTrigger,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_api_gateway_triggers(
        self,
        get_api_gateway_triggers_request: "GetApiGatewayTriggersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["DetailedApiGatewayTrigger"]:
        async for response in self._unary_stream(
            "/faas.APIGatewayService/GetAPIGatewayTriggers",
            get_api_gateway_triggers_request,
            DetailedApiGatewayTrigger,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class CrontabTriggerServiceStub(betterproto.ServiceStub):
    async def create_crontab_trigger(
        self,
        crontab_trigger_configuration: "CrontabTriggerConfiguration",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CrontabTrigger":
        return await self._unary_unary(
            "/faas.CrontabTriggerService/CreateCrontabTrigger",
            crontab_trigger_configuration,
            CrontabTrigger,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_crontab_trigger(
        self,
        delete_crontab_trigger_request: "DeleteCrontabTriggerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Empty":
        return await self._unary_unary(
            "/faas.CrontabTriggerService/DeleteCrontabTrigger",
            delete_crontab_trigger_request,
            Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all_crontab_triggers(
        self,
        empty: "Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["CrontabTrigger"]:
        async for response in self._unary_stream(
            "/faas.CrontabTriggerService/GetAllCrontabTriggers",
            empty,
            CrontabTrigger,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_crontab_triggers(
        self,
        get_crontab_triggers_request: "GetCrontabTriggersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["CrontabTrigger"]:
        async for response in self._unary_stream(
            "/faas.CrontabTriggerService/GetCrontabTriggers",
            get_crontab_triggers_request,
            CrontabTrigger,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class AuthServiceStub(betterproto.ServiceStub):
    async def create_user(
        self,
        user_credentials_request: "UserCredentialsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "User":
        return await self._unary_unary(
            "/faas.AuthService/CreateUser",
            user_credentials_request,
            User,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user(
        self,
        user_credentials_request: "UserCredentialsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "User":
        return await self._unary_unary(
            "/faas.AuthService/GetUser",
            user_credentials_request,
            User,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verify_user(
        self,
        verify_user_request: "VerifyUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "User":
        return await self._unary_unary(
            "/faas.AuthService/VerifyUser",
            verify_user_request,
            User,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_user_password(
        self,
        change_user_password_request: "ChangeUserPasswordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "User":
        return await self._unary_unary(
            "/faas.AuthService/ChangeUserPassword",
            change_user_password_request,
            User,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class FunctionServiceBase(ServiceBase):

    async def create_function(
        self, function_configuration: "FunctionConfiguration"
    ) -> "DetailedFunction":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_function_code(
        self, change_function_code_request: "ChangeFunctionCodeRequest"
    ) -> "DetailedFunction":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_function_runtime(
        self, change_function_runtime_request: "ChangeFunctionRuntimeRequest"
    ) -> "DetailedFunction":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_function(self, brief_function: "BriefFunction") -> "Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_function(
        self, get_function_details_request: "GetFunctionDetailsRequest"
    ) -> "DetailedFunction":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_functions(self, empty: "Empty") -> AsyncIterator["BriefFunction"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield BriefFunction()

    async def __rpc_create_function(
        self, stream: "grpclib.server.Stream[FunctionConfiguration, DetailedFunction]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_function(request)
        await stream.send_message(response)

    async def __rpc_change_function_code(
        self,
        stream: "grpclib.server.Stream[ChangeFunctionCodeRequest, DetailedFunction]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_function_code(request)
        await stream.send_message(response)

    async def __rpc_change_function_runtime(
        self,
        stream: "grpclib.server.Stream[ChangeFunctionRuntimeRequest, DetailedFunction]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_function_runtime(request)
        await stream.send_message(response)

    async def __rpc_delete_function(
        self, stream: "grpclib.server.Stream[BriefFunction, Empty]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_function(request)
        await stream.send_message(response)

    async def __rpc_get_function(
        self,
        stream: "grpclib.server.Stream[GetFunctionDetailsRequest, DetailedFunction]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_function(request)
        await stream.send_message(response)

    async def __rpc_get_functions(
        self, stream: "grpclib.server.Stream[Empty, BriefFunction]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_functions,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/faas.FunctionService/CreateFunction": grpclib.const.Handler(
                self.__rpc_create_function,
                grpclib.const.Cardinality.UNARY_UNARY,
                FunctionConfiguration,
                DetailedFunction,
            ),
            "/faas.FunctionService/ChangeFunctionCode": grpclib.const.Handler(
                self.__rpc_change_function_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChangeFunctionCodeRequest,
                DetailedFunction,
            ),
            "/faas.FunctionService/ChangeFunctionRuntime": grpclib.const.Handler(
                self.__rpc_change_function_runtime,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChangeFunctionRuntimeRequest,
                DetailedFunction,
            ),
            "/faas.FunctionService/DeleteFunction": grpclib.const.Handler(
                self.__rpc_delete_function,
                grpclib.const.Cardinality.UNARY_UNARY,
                BriefFunction,
                Empty,
            ),
            "/faas.FunctionService/GetFunction": grpclib.const.Handler(
                self.__rpc_get_function,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetFunctionDetailsRequest,
                DetailedFunction,
            ),
            "/faas.FunctionService/GetFunctions": grpclib.const.Handler(
                self.__rpc_get_functions,
                grpclib.const.Cardinality.UNARY_STREAM,
                Empty,
                BriefFunction,
            ),
        }


class RuntimeServiceBase(ServiceBase):

    async def create_runtime(
        self, runtime_configuration: "RuntimeConfiguration"
    ) -> "UpdatedRuntimeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def edit_runtime(
        self, runtime_configuration: "RuntimeConfiguration"
    ) -> "UpdatedRuntimeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_runtime_details(
        self, get_runtime_details_request: "GetRuntimeDetailsRequest"
    ) -> "DetailedRuntime":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_runtime_tags(self, empty: "Empty") -> AsyncIterator["BriefRuntime"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield BriefRuntime()

    async def __rpc_create_runtime(
        self,
        stream: "grpclib.server.Stream[RuntimeConfiguration, UpdatedRuntimeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_runtime(request)
        await stream.send_message(response)

    async def __rpc_edit_runtime(
        self,
        stream: "grpclib.server.Stream[RuntimeConfiguration, UpdatedRuntimeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.edit_runtime(request)
        await stream.send_message(response)

    async def __rpc_get_runtime_details(
        self, stream: "grpclib.server.Stream[GetRuntimeDetailsRequest, DetailedRuntime]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_runtime_details(request)
        await stream.send_message(response)

    async def __rpc_get_runtime_tags(
        self, stream: "grpclib.server.Stream[Empty, BriefRuntime]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_runtime_tags,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/faas.RuntimeService/CreateRuntime": grpclib.const.Handler(
                self.__rpc_create_runtime,
                grpclib.const.Cardinality.UNARY_UNARY,
                RuntimeConfiguration,
                UpdatedRuntimeResponse,
            ),
            "/faas.RuntimeService/EditRuntime": grpclib.const.Handler(
                self.__rpc_edit_runtime,
                grpclib.const.Cardinality.UNARY_UNARY,
                RuntimeConfiguration,
                UpdatedRuntimeResponse,
            ),
            "/faas.RuntimeService/GetRuntimeDetails": grpclib.const.Handler(
                self.__rpc_get_runtime_details,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRuntimeDetailsRequest,
                DetailedRuntime,
            ),
            "/faas.RuntimeService/GetRuntimeTags": grpclib.const.Handler(
                self.__rpc_get_runtime_tags,
                grpclib.const.Cardinality.UNARY_STREAM,
                Empty,
                BriefRuntime,
            ),
        }


class LoadBalancerServiceBase(ServiceBase):

    async def invoke_function(
        self, invoke_function_request: "InvokeFunctionRequest"
    ) -> "InvocationResult":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_node(
        self, register_node_request: "RegisterNodeRequest"
    ) -> "NodeConfiguration":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_invoke_function(
        self, stream: "grpclib.server.Stream[InvokeFunctionRequest, InvocationResult]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.invoke_function(request)
        await stream.send_message(response)

    async def __rpc_register_node(
        self, stream: "grpclib.server.Stream[RegisterNodeRequest, NodeConfiguration]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_node(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/faas.LoadBalancerService/InvokeFunction": grpclib.const.Handler(
                self.__rpc_invoke_function,
                grpclib.const.Cardinality.UNARY_UNARY,
                InvokeFunctionRequest,
                InvocationResult,
            ),
            "/faas.LoadBalancerService/RegisterNode": grpclib.const.Handler(
                self.__rpc_register_node,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterNodeRequest,
                NodeConfiguration,
            ),
        }


class ApiGatewayServiceBase(ServiceBase):

    async def create_api_gateway_trigger(
        self, api_gateway_trigger_configuration: "ApiGatewayTriggerConfiguration"
    ) -> "DetailedApiGatewayTrigger":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_api_gateway_trigger(
        self, delete_api_gateway_trigger_request: "DeleteApiGatewayTriggerRequest"
    ) -> "Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_api_gateway_triggers(
        self, empty: "Empty"
    ) -> AsyncIterator["DetailedApiGatewayTrigger"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield DetailedApiGatewayTrigger()

    async def get_api_gateway_triggers(
        self, get_api_gateway_triggers_request: "GetApiGatewayTriggersRequest"
    ) -> AsyncIterator["DetailedApiGatewayTrigger"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield DetailedApiGatewayTrigger()

    async def __rpc_create_api_gateway_trigger(
        self,
        stream: "grpclib.server.Stream[ApiGatewayTriggerConfiguration, DetailedApiGatewayTrigger]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_api_gateway_trigger(request)
        await stream.send_message(response)

    async def __rpc_delete_api_gateway_trigger(
        self, stream: "grpclib.server.Stream[DeleteApiGatewayTriggerRequest, Empty]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_api_gateway_trigger(request)
        await stream.send_message(response)

    async def __rpc_get_all_api_gateway_triggers(
        self, stream: "grpclib.server.Stream[Empty, DetailedApiGatewayTrigger]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all_api_gateway_triggers,
            stream,
            request,
        )

    async def __rpc_get_api_gateway_triggers(
        self,
        stream: "grpclib.server.Stream[GetApiGatewayTriggersRequest, DetailedApiGatewayTrigger]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_api_gateway_triggers,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/faas.APIGatewayService/CreateAPIGatewayTrigger": grpclib.const.Handler(
                self.__rpc_create_api_gateway_trigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                ApiGatewayTriggerConfiguration,
                DetailedApiGatewayTrigger,
            ),
            "/faas.APIGatewayService/DeleteAPIGatewayTrigger": grpclib.const.Handler(
                self.__rpc_delete_api_gateway_trigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteApiGatewayTriggerRequest,
                Empty,
            ),
            "/faas.APIGatewayService/GetAllAPIGatewayTriggers": grpclib.const.Handler(
                self.__rpc_get_all_api_gateway_triggers,
                grpclib.const.Cardinality.UNARY_STREAM,
                Empty,
                DetailedApiGatewayTrigger,
            ),
            "/faas.APIGatewayService/GetAPIGatewayTriggers": grpclib.const.Handler(
                self.__rpc_get_api_gateway_triggers,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetApiGatewayTriggersRequest,
                DetailedApiGatewayTrigger,
            ),
        }


class CrontabTriggerServiceBase(ServiceBase):

    async def create_crontab_trigger(
        self, crontab_trigger_configuration: "CrontabTriggerConfiguration"
    ) -> "CrontabTrigger":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_crontab_trigger(
        self, delete_crontab_trigger_request: "DeleteCrontabTriggerRequest"
    ) -> "Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_crontab_triggers(
        self, empty: "Empty"
    ) -> AsyncIterator["CrontabTrigger"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CrontabTrigger()

    async def get_crontab_triggers(
        self, get_crontab_triggers_request: "GetCrontabTriggersRequest"
    ) -> AsyncIterator["CrontabTrigger"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CrontabTrigger()

    async def __rpc_create_crontab_trigger(
        self,
        stream: "grpclib.server.Stream[CrontabTriggerConfiguration, CrontabTrigger]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_crontab_trigger(request)
        await stream.send_message(response)

    async def __rpc_delete_crontab_trigger(
        self, stream: "grpclib.server.Stream[DeleteCrontabTriggerRequest, Empty]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_crontab_trigger(request)
        await stream.send_message(response)

    async def __rpc_get_all_crontab_triggers(
        self, stream: "grpclib.server.Stream[Empty, CrontabTrigger]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all_crontab_triggers,
            stream,
            request,
        )

    async def __rpc_get_crontab_triggers(
        self, stream: "grpclib.server.Stream[GetCrontabTriggersRequest, CrontabTrigger]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_crontab_triggers,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/faas.CrontabTriggerService/CreateCrontabTrigger": grpclib.const.Handler(
                self.__rpc_create_crontab_trigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                CrontabTriggerConfiguration,
                CrontabTrigger,
            ),
            "/faas.CrontabTriggerService/DeleteCrontabTrigger": grpclib.const.Handler(
                self.__rpc_delete_crontab_trigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteCrontabTriggerRequest,
                Empty,
            ),
            "/faas.CrontabTriggerService/GetAllCrontabTriggers": grpclib.const.Handler(
                self.__rpc_get_all_crontab_triggers,
                grpclib.const.Cardinality.UNARY_STREAM,
                Empty,
                CrontabTrigger,
            ),
            "/faas.CrontabTriggerService/GetCrontabTriggers": grpclib.const.Handler(
                self.__rpc_get_crontab_triggers,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetCrontabTriggersRequest,
                CrontabTrigger,
            ),
        }


class AuthServiceBase(ServiceBase):

    async def create_user(
        self, user_credentials_request: "UserCredentialsRequest"
    ) -> "User":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user(
        self, user_credentials_request: "UserCredentialsRequest"
    ) -> "User":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verify_user(self, verify_user_request: "VerifyUserRequest") -> "User":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_user_password(
        self, change_user_password_request: "ChangeUserPasswordRequest"
    ) -> "User":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_user(
        self, stream: "grpclib.server.Stream[UserCredentialsRequest, User]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_user(request)
        await stream.send_message(response)

    async def __rpc_get_user(
        self, stream: "grpclib.server.Stream[UserCredentialsRequest, User]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user(request)
        await stream.send_message(response)

    async def __rpc_verify_user(
        self, stream: "grpclib.server.Stream[VerifyUserRequest, User]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.verify_user(request)
        await stream.send_message(response)

    async def __rpc_change_user_password(
        self, stream: "grpclib.server.Stream[ChangeUserPasswordRequest, User]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_user_password(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/faas.AuthService/CreateUser": grpclib.const.Handler(
                self.__rpc_create_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                UserCredentialsRequest,
                User,
            ),
            "/faas.AuthService/GetUser": grpclib.const.Handler(
                self.__rpc_get_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                UserCredentialsRequest,
                User,
            ),
            "/faas.AuthService/VerifyUser": grpclib.const.Handler(
                self.__rpc_verify_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                VerifyUserRequest,
                User,
            ),
            "/faas.AuthService/ChangeUserPassword": grpclib.const.Handler(
                self.__rpc_change_user_password,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChangeUserPasswordRequest,
                User,
            ),
        }
